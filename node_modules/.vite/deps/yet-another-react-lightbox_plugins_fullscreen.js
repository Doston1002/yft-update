import {
  CLASS_FULLSIZE,
  IconButton,
  MODULE_CONTROLLER,
  PLUGIN_FULLSCREEN,
  PLUGIN_THUMBNAILS,
  clsx,
  createIcon,
  createModule,
  cssClass,
  label,
  makeUseContext,
  useController,
  useEventCallback,
  useLayoutEffect
} from "./chunk-2TVOGE4U.js";
import "./chunk-JZ3YVIXN.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/yet-another-react-lightbox/dist/plugins/fullscreen/Fullscreen.js
var React3 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/plugins/fullscreen/FullscreenButton.js
var React2 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/plugins/fullscreen/FullscreenContext.js
var React = __toESM(require_react(), 1);
var FullscreenContext = React.createContext(null);
var useFullscreen = makeUseContext("useFullscreen", "FullscreenContext", FullscreenContext);
function FullscreenContextProvider({ fullscreen: auto, children }) {
  const containerRef = React.useRef(null);
  const [fullscreen, setFullscreen] = React.useState(false);
  const [fullscreenEnabled, setFullscreenEnabled] = React.useState();
  useLayoutEffect(() => {
    var _a, _b, _c, _d;
    setFullscreenEnabled((_d = (_c = (_b = (_a = document.fullscreenEnabled) !== null && _a !== void 0 ? _a : document.webkitFullscreenEnabled) !== null && _b !== void 0 ? _b : document.mozFullScreenEnabled) !== null && _c !== void 0 ? _c : document.msFullscreenEnabled) !== null && _d !== void 0 ? _d : false);
  }, []);
  const getFullscreenElement = React.useCallback(() => {
    var _a, _b, _c;
    return (_c = (_b = (_a = document.fullscreenElement) !== null && _a !== void 0 ? _a : document.webkitFullscreenElement) !== null && _b !== void 0 ? _b : document.mozFullScreenElement) !== null && _c !== void 0 ? _c : document.msFullscreenElement;
  }, []);
  const requestFullscreen = React.useCallback(() => {
    const container = containerRef.current;
    if (container) {
      try {
        if (container.requestFullscreen) {
          container.requestFullscreen().catch(() => {
          });
        } else if (container.webkitRequestFullscreen) {
          container.webkitRequestFullscreen();
        } else if (container.mozRequestFullScreen) {
          container.mozRequestFullScreen();
        } else if (container.msRequestFullscreen) {
          container.msRequestFullscreen();
        }
      } catch (err) {
      }
    }
  }, []);
  const exitFullscreen = React.useCallback(() => {
    if (getFullscreenElement()) {
      try {
        if (document.exitFullscreen) {
          document.exitFullscreen().catch(() => {
          });
        } else if (document.webkitExitFullscreen) {
          document.webkitExitFullscreen();
        } else if (document.mozCancelFullScreen) {
          document.mozCancelFullScreen();
        } else if (document.msExitFullscreen) {
          document.msExitFullscreen();
        }
      } catch (err) {
      }
    }
  }, [getFullscreenElement]);
  const toggleFullscreen = React.useCallback(() => {
    if (fullscreen) {
      exitFullscreen();
    } else {
      requestFullscreen();
    }
  }, [fullscreen, requestFullscreen, exitFullscreen]);
  const fullscreenChangeListener = React.useCallback(() => {
    if (getFullscreenElement() === containerRef.current) {
      setFullscreen(true);
    } else {
      setFullscreen(false);
    }
  }, [getFullscreenElement]);
  React.useEffect(() => {
    const events = ["fullscreenchange", "webkitfullscreenchange", "mozfullscreenchange", "MSFullscreenChange"];
    events.forEach((event) => {
      document.addEventListener(event, fullscreenChangeListener);
    });
    return () => {
      events.forEach((event) => {
        document.removeEventListener(event, fullscreenChangeListener);
      });
    };
  }, [fullscreenChangeListener]);
  const handleAutoFullscreen = useEventCallback(() => {
    if (auto) {
      requestFullscreen();
    }
  });
  React.useEffect(() => {
    handleAutoFullscreen();
    return () => {
      exitFullscreen();
    };
  }, [handleAutoFullscreen, exitFullscreen]);
  const context = React.useMemo(() => ({
    fullscreen,
    fullscreenEnabled,
    toggleFullscreen
  }), [fullscreen, fullscreenEnabled, toggleFullscreen]);
  return React.createElement(
    "div",
    { ref: containerRef, className: clsx(cssClass(PLUGIN_FULLSCREEN), cssClass(CLASS_FULLSIZE)) },
    React.createElement(FullscreenContext.Provider, { value: context }, children)
  );
}

// node_modules/yet-another-react-lightbox/dist/plugins/fullscreen/FullscreenButton.js
var EnterFullscreenIcon = createIcon("EnterFullscreen", React2.createElement("path", { d: "M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z" }));
var ExitFullscreenIcon = createIcon("ExitFullscreen", React2.createElement("path", { d: "M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z" }));
function FullscreenButton() {
  var _a;
  const { labels, render } = useController().getLightboxProps();
  const { fullscreen, fullscreenEnabled, toggleFullscreen } = useFullscreen();
  if (!fullscreenEnabled)
    return null;
  return render.buttonFullscreen ? React2.createElement(React2.Fragment, null, (_a = render.buttonFullscreen) === null || _a === void 0 ? void 0 : _a.call(render, { fullscreen, fullscreenEnabled, toggleFullscreen })) : React2.createElement(IconButton, { disabled: !fullscreenEnabled, label: fullscreen ? label(labels, "Exit Fullscreen") : label(labels, "Enter Fullscreen"), icon: fullscreen ? ExitFullscreenIcon : EnterFullscreenIcon, renderIcon: fullscreen ? render.iconExitFullscreen : render.iconEnterFullscreen, onClick: toggleFullscreen });
}

// node_modules/yet-another-react-lightbox/dist/plugins/fullscreen/Fullscreen.js
var Fullscreen = ({ augment, contains, addParent }) => {
  augment(({ toolbar: { buttons, ...restToolbar }, ...restProps }) => ({
    toolbar: { buttons: [React3.createElement(FullscreenButton, { key: PLUGIN_FULLSCREEN }), ...buttons], ...restToolbar },
    ...restProps
  }));
  addParent(contains(PLUGIN_THUMBNAILS) ? PLUGIN_THUMBNAILS : MODULE_CONTROLLER, createModule(PLUGIN_FULLSCREEN, FullscreenContextProvider));
};

// node_modules/yet-another-react-lightbox/dist/plugins/fullscreen/index.js
var fullscreen_default = Fullscreen;
export {
  fullscreen_default as default
};
//# sourceMappingURL=yet-another-react-lightbox_plugins_fullscreen.js.map
