{
  "version": 3,
  "sources": ["../../react-photo-album/dist/index.mjs"],
  "sourcesContent": ["import * as React from 'react';\n\nfunction ratio({ width, height }) {\n    return width / height;\n}\n\nfunction round(value, decimals = 0) {\n    const factor = 10 ** decimals;\n    return Math.round((value + Number.EPSILON) * factor) / factor;\n}\n\nfunction rankingFunctionComparator(rank) {\n    return (a, b) => rank(b) - rank(a);\n}\nclass MinHeap {\n    constructor(comparator) {\n        this.comparator = comparator;\n        this.heap = [];\n        this.n = 0;\n    }\n    greater(i, j) {\n        return this.comparator(this.heap[i], this.heap[j]) < 0;\n    }\n    swap(i, j) {\n        const temp = this.heap[i];\n        this.heap[i] = this.heap[j];\n        this.heap[j] = temp;\n    }\n    swim(i) {\n        let k = i;\n        let k2 = Math.floor(k / 2);\n        while (k > 1 && this.greater(k2, k)) {\n            this.swap(k2, k);\n            k = k2;\n            k2 = Math.floor(k / 2);\n        }\n    }\n    sink(i) {\n        let k = i;\n        let k2 = k * 2;\n        while (k2 <= this.n) {\n            if (k2 < this.n && this.greater(k2, k2 + 1))\n                k2 += 1;\n            if (!this.greater(k, k2))\n                break;\n            this.swap(k, k2);\n            k = k2;\n            k2 = k * 2;\n        }\n    }\n    push(element) {\n        this.n += 1;\n        this.heap[this.n] = element;\n        this.swim(this.n);\n    }\n    pop() {\n        if (this.n === 0)\n            return undefined;\n        this.swap(1, this.n);\n        this.n -= 1;\n        const max = this.heap.pop();\n        this.sink(1);\n        return max;\n    }\n    size() {\n        return this.n;\n    }\n}\n\nfunction buildPrecedentsMap(graph, startNode, endNode) {\n    const precedentsMap = new Map();\n    const visited = new Set();\n    const storedShortestPaths = new Map();\n    storedShortestPaths.set(startNode, 0);\n    const queue = new MinHeap(rankingFunctionComparator((el) => el.weight));\n    queue.push({ id: startNode, weight: 0 });\n    while (queue.size() > 0) {\n        const { id, weight } = queue.pop();\n        if (!visited.has(id)) {\n            const neighboringNodes = graph(id);\n            visited.add(id);\n            neighboringNodes.forEach((neighborWeight, neighbor) => {\n                const newWeight = weight + neighborWeight;\n                const currentId = precedentsMap.get(neighbor);\n                const currentWeight = storedShortestPaths.get(neighbor);\n                if (currentWeight === undefined ||\n                    (currentWeight > newWeight &&\n                        (currentWeight / newWeight > 1.005 || (currentId !== undefined && currentId < id)))) {\n                    storedShortestPaths.set(neighbor, newWeight);\n                    queue.push({ id: neighbor, weight: newWeight });\n                    precedentsMap.set(neighbor, id);\n                }\n            });\n        }\n    }\n    return storedShortestPaths.has(endNode) ? precedentsMap : undefined;\n}\nfunction getPathFromPrecedentsMap(precedentsMap, endNode) {\n    const nodes = [];\n    for (let node = endNode; node !== undefined; node = precedentsMap.get(node)) {\n        nodes.push(node);\n    }\n    return nodes.reverse();\n}\nfunction findShortestPath(graph, startNode, endNode) {\n    const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\n    return precedentsMap ? getPathFromPrecedentsMap(precedentsMap, endNode) : undefined;\n}\n\nfunction findIdealNodeSearch({ photos, targetRowHeight, containerWidth, }) {\n    const minRatio = photos.reduce((acc, photo) => Math.min(ratio(photo), acc), Number.MAX_VALUE);\n    return round(containerWidth / targetRowHeight / minRatio) + 2;\n}\nfunction getCommonHeight(row, containerWidth, spacing, padding) {\n    const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\n    const totalAspectRatio = row.reduce((acc, photo) => acc + ratio(photo), 0);\n    return rowWidth / totalAspectRatio;\n}\nfunction cost(photos, i, j, width, targetRowHeight, spacing, padding) {\n    const row = photos.slice(i, j);\n    const commonHeight = getCommonHeight(row, width, spacing, padding);\n    return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : undefined;\n}\nfunction makeGetRowNeighbors({ photos, layoutOptions, targetRowHeight, limitNodeSearch, rowConstraints, }) {\n    return (node) => {\n        var _a, _b;\n        const { containerWidth, spacing, padding } = layoutOptions;\n        const results = new Map();\n        results.set(node, 0);\n        const startOffset = (_a = rowConstraints === null || rowConstraints === void 0 ? void 0 : rowConstraints.minPhotos) !== null && _a !== void 0 ? _a : 1;\n        const endOffset = Math.min(limitNodeSearch, (_b = rowConstraints === null || rowConstraints === void 0 ? void 0 : rowConstraints.maxPhotos) !== null && _b !== void 0 ? _b : Infinity);\n        for (let i = node + startOffset; i < photos.length + 1; i += 1) {\n            if (i - node > endOffset)\n                break;\n            const currentCost = cost(photos, node, i, containerWidth, targetRowHeight, spacing, padding);\n            if (currentCost === undefined)\n                break;\n            results.set(i, currentCost);\n        }\n        return results;\n    };\n}\nfunction computeRowsLayout({ photos, layoutOptions, }) {\n    const { spacing, padding, containerWidth, targetRowHeight, rowConstraints } = layoutOptions;\n    const limitNodeSearch = findIdealNodeSearch({ photos, containerWidth, targetRowHeight });\n    const getNeighbors = makeGetRowNeighbors({\n        photos,\n        layoutOptions,\n        targetRowHeight,\n        limitNodeSearch,\n        rowConstraints,\n    });\n    const path = findShortestPath(getNeighbors, 0, photos.length);\n    if (path === undefined)\n        return undefined;\n    const layout = [];\n    for (let i = 1; i < path.length; i += 1) {\n        const row = photos.map((photo, index) => ({ photo, index })).slice(path[i - 1], path[i]);\n        const height = getCommonHeight(row.map(({ photo }) => photo), containerWidth, spacing, padding);\n        layout.push(row.map(({ photo, index }, photoIndex) => ({\n            photo,\n            layout: {\n                height,\n                width: height * ratio(photo),\n                index,\n                photoIndex,\n                photosCount: row.length,\n            },\n        })));\n    }\n    return layout;\n}\n\nfunction calcWidth(base, { width, photosCount }, { spacing, padding, containerWidth }) {\n    const gaps = spacing * (photosCount - 1) + 2 * padding * photosCount;\n    return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\n}\nfunction cssPhotoWidth(layout, layoutOptions) {\n    return layoutOptions.layout !== \"rows\"\n        ? `calc(100% - ${2 * layoutOptions.padding}px)`\n        : calcWidth(\"100%\", layout, layoutOptions);\n}\nfunction calculateSizesValue(size, layout, layoutOptions) {\n    var _a, _b;\n    return calcWidth((_b = (_a = size.match(/calc\\((.*)\\)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : size, layout, layoutOptions);\n}\nfunction srcSetAndSizes(photo, layout, layoutOptions) {\n    let srcSet;\n    let sizes;\n    if (photo.images && photo.images.length > 0) {\n        srcSet = photo.images\n            .concat(!photo.images.find(({ width }) => width === photo.width)\n            ? [{ src: photo.src, width: photo.width, height: photo.height }]\n            : [])\n            .sort((first, second) => first.width - second.width)\n            .map((image) => `${image.src} ${image.width}w`)\n            .join(\", \");\n        if (layoutOptions.sizes) {\n            sizes = (layoutOptions.sizes.sizes || [])\n                .map(({ viewport, size }) => `${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`)\n                .concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions))\n                .join(\", \");\n        }\n        else {\n            sizes = `${Math.ceil((layout.width / layoutOptions.containerWidth) * 100)}vw`;\n        }\n    }\n    return { srcSet, sizes };\n}\nfunction PhotoRenderer(props) {\n    var _a, _b;\n    const { photo, layout, layoutOptions, imageProps: { style, ...restImageProps } = {}, renderPhoto } = props;\n    const { onClick } = layoutOptions;\n    const imageStyle = {\n        display: \"block\",\n        boxSizing: \"content-box\",\n        width: cssPhotoWidth(layout, layoutOptions),\n        height: \"auto\",\n        aspectRatio: `${photo.width} / ${photo.height}`,\n        ...(layoutOptions.padding ? { padding: `${layoutOptions.padding}px` } : null),\n        ...((layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") &&\n            layout.photoIndex < layout.photosCount - 1\n            ? { marginBottom: `${layoutOptions.spacing}px` }\n            : null),\n        ...(onClick ? { cursor: \"pointer\" } : null),\n        ...style,\n    };\n    const handleClick = onClick\n        ? (event) => {\n            onClick({ event, photo, index: layout.index });\n        }\n        : undefined;\n    const imageProps = {\n        src: photo.src,\n        alt: (_a = photo.alt) !== null && _a !== void 0 ? _a : \"\",\n        title: photo.title,\n        onClick: handleClick,\n        style: imageStyle,\n        className: \"react-photo-album--photo\",\n        loading: \"lazy\",\n        decoding: \"async\",\n        ...srcSetAndSizes(photo, layout, layoutOptions),\n        ...restImageProps,\n    };\n    const renderDefaultPhoto = (options) => {\n        const { src, alt, srcSet, sizes, style: unwrappedStyle, ...rest } = imageProps;\n        return (React.createElement(\"img\", { alt: alt, ...(srcSet ? { srcSet, sizes } : null), src: src, style: (options === null || options === void 0 ? void 0 : options.wrapped) ? { display: \"block\", width: \"100%\", height: \"100%\" } : unwrappedStyle, ...rest }));\n    };\n    const wrapperStyle = (({ display, boxSizing, width, aspectRatio, padding, marginBottom, cursor }) => ({\n        display,\n        boxSizing,\n        width,\n        aspectRatio,\n        padding,\n        marginBottom,\n        cursor,\n    }))(imageStyle);\n    return (React.createElement(React.Fragment, null, (_b = renderPhoto === null || renderPhoto === void 0 ? void 0 : renderPhoto({\n        photo,\n        layout,\n        layoutOptions,\n        imageProps,\n        renderDefaultPhoto,\n        wrapperStyle,\n    })) !== null && _b !== void 0 ? _b : renderDefaultPhoto()));\n}\n\nfunction defaultRenderRowContainer({ rowContainerProps, children, }) {\n    return React.createElement(\"div\", { ...rowContainerProps }, children);\n}\nfunction RowContainerRenderer(props) {\n    const { layoutOptions, rowIndex, rowsCount, renderRowContainer, rowContainerProps: { style, ...restRowContainerProps } = {}, children, } = props;\n    const rowContainerProps = {\n        className: \"react-photo-album--row\",\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            justifyContent: \"space-between\",\n            ...(rowIndex < rowsCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null),\n            ...style,\n        },\n        ...restRowContainerProps,\n    };\n    return (React.createElement(React.Fragment, null, (renderRowContainer !== null && renderRowContainer !== void 0 ? renderRowContainer : defaultRenderRowContainer)({\n        layoutOptions,\n        rowIndex,\n        rowsCount,\n        rowContainerProps,\n        children,\n    })));\n}\n\nfunction RowsLayout(props) {\n    const { photos, layoutOptions, renderPhoto, renderRowContainer, componentsProps } = props;\n    const rowsLayout = computeRowsLayout({ photos, layoutOptions });\n    if (!rowsLayout)\n        return null;\n    return (React.createElement(React.Fragment, null, rowsLayout.map((row, rowIndex) => (React.createElement(RowContainerRenderer, { key: `row-${rowIndex}`, layoutOptions: layoutOptions, rowIndex: rowIndex, rowsCount: rowsLayout.length, renderRowContainer: renderRowContainer, rowContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.rowContainerProps }, row.map(({ photo, layout }) => (React.createElement(PhotoRenderer, { key: photo.key || photo.src, photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }))))))));\n}\n\nfunction computeShortestPath(graph, pathLength, startNode, endNode) {\n    const matrix = new Map();\n    const queue = new Set();\n    queue.add(startNode);\n    for (let length = 0; length < pathLength; length += 1) {\n        const currentQueue = [...queue.keys()];\n        queue.clear();\n        currentQueue.forEach((node) => {\n            const accumulatedWeight = length > 0 ? matrix.get(node)[length].weight : 0;\n            graph(node).forEach(({ neighbor, weight }) => {\n                let paths = matrix.get(neighbor);\n                if (!paths) {\n                    paths = [];\n                    matrix.set(neighbor, paths);\n                }\n                const newWeight = accumulatedWeight + weight;\n                const nextPath = paths[length + 1];\n                if (!nextPath ||\n                    (nextPath.weight > newWeight && (nextPath.weight / newWeight > 1.0001 || node < nextPath.node))) {\n                    paths[length + 1] = { node, weight: newWeight };\n                }\n                if (length < pathLength - 1 && neighbor !== endNode) {\n                    queue.add(neighbor);\n                }\n            });\n        });\n    }\n    return matrix;\n}\nfunction reconstructShortestPath(matrix, pathLength, endNode) {\n    const path = [endNode];\n    for (let node = endNode, length = pathLength; length > 0; length -= 1) {\n        node = matrix.get(node)[length].node;\n        path.push(node);\n    }\n    return path.reverse();\n}\nfunction findShortestPathLengthN(graph, pathLength, startNode, endNode) {\n    return reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n}\n\nfunction makeGetColumnNeighbors({ photos, spacing, padding, targetColumnWidth, targetColumnHeight, }) {\n    return (node) => {\n        const results = [];\n        const cutOffHeight = targetColumnHeight * 1.5;\n        let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\n        for (let i = node + 1; i < photos.length + 1; i += 1) {\n            results.push({ neighbor: i, weight: (targetColumnHeight - height) ** 2 });\n            if (height > cutOffHeight || i === photos.length) {\n                break;\n            }\n            height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\n        }\n        return results;\n    };\n}\nfunction buildColumnsModel({ path, photos, containerWidth, columnsGaps, columnsRatios, spacing, padding, }) {\n    const columnsModel = [];\n    const totalRatio = columnsRatios.reduce((total, columnRatio) => total + columnRatio, 0);\n    for (let i = 0; i < path.length - 1; i += 1) {\n        const column = photos.map((photo, index) => ({ photo, index })).slice(path[i], path[i + 1]);\n        const totalAdjustedGaps = columnsRatios.reduce((total, columnRatio, index) => total + (columnsGaps[i] - columnsGaps[index]) * columnRatio, 0);\n        const columnWidth = ((containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) *\n            columnsRatios[i]) /\n            totalRatio;\n        columnsModel.push(column.map(({ photo, index }, photoIndex) => ({\n            photo,\n            layout: {\n                width: columnWidth,\n                height: columnWidth / ratio(photo),\n                index,\n                photoIndex,\n                photosCount: column.length,\n            },\n        })));\n    }\n    return columnsModel;\n}\nfunction computeColumnsModel({ photos, layoutOptions, targetColumnWidth, }) {\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const columnsGaps = [];\n    const columnsRatios = [];\n    if (photos.length <= columns) {\n        const averageRatio = photos.length > 0 ? photos.reduce((acc, photo) => acc + ratio(photo), 0) / photos.length : 1;\n        for (let i = 0; i < columns; i += 1) {\n            columnsGaps[i] = 2 * padding;\n            columnsRatios[i] = i < photos.length ? ratio(photos[i]) : averageRatio;\n        }\n        const columnsModel = buildColumnsModel({\n            path: Array.from({ length: columns + 1 }).map((_, index) => Math.min(index, photos.length)),\n            photos,\n            columnsRatios,\n            columnsGaps,\n            containerWidth,\n            spacing,\n            padding,\n        });\n        return { columnsGaps, columnsRatios, columnsModel };\n    }\n    const targetColumnHeight = (photos.reduce((acc, photo) => acc + targetColumnWidth / ratio(photo), 0) +\n        spacing * (photos.length - columns) +\n        2 * padding * photos.length) /\n        columns;\n    const getNeighbors = makeGetColumnNeighbors({\n        photos,\n        targetColumnWidth,\n        targetColumnHeight,\n        spacing,\n        padding,\n    });\n    const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length);\n    for (let i = 0; i < path.length - 1; i += 1) {\n        const column = photos.slice(path[i], path[i + 1]);\n        columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\n        columnsRatios[i] = 1 / column.reduce((acc, photo) => acc + 1 / ratio(photo), 0);\n    }\n    const columnsModel = buildColumnsModel({\n        path,\n        photos,\n        columnsRatios,\n        columnsGaps,\n        containerWidth,\n        spacing,\n        padding,\n    });\n    return { columnsGaps, columnsRatios, columnsModel };\n}\nfunction computeLayout(props) {\n    const { photos, layoutOptions } = props;\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n    const { columnsGaps, columnsRatios, columnsModel } = computeColumnsModel({\n        photos,\n        layoutOptions,\n        targetColumnWidth,\n    });\n    if (columnsModel.findIndex((columnModel) => columnModel.findIndex(({ layout: { width, height } }) => width < 0 || height < 0) >= 0) >= 0) {\n        if (columns > 1) {\n            return computeLayout({ photos, layoutOptions: { ...layoutOptions, columns: columns - 1 } });\n        }\n        return undefined;\n    }\n    return { columnsModel, columnsGaps, columnsRatios };\n}\nfunction computeColumnsLayout({ photos, layoutOptions, }) {\n    return computeLayout({ photos, layoutOptions });\n}\n\nfunction defaultRenderColumnContainer({ columnContainerProps, children, }) {\n    return React.createElement(\"div\", { ...columnContainerProps }, children);\n}\nfunction cssColumnWidth(props) {\n    const { layoutOptions, columnIndex, columnsCount, columnsGaps, columnsRatios } = props;\n    const { layout, spacing, padding } = layoutOptions;\n    if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\n        return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\n    }\n    const totalRatio = columnsRatios.reduce((acc, ratio) => acc + ratio, 0);\n    const totalAdjustedGaps = columnsRatios.reduce((acc, ratio, index) => acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio, 0);\n    return `calc((100% - ${round((columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps, 3)}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\n}\nfunction ColumnContainerRenderer(props) {\n    const { layoutOptions, renderColumnContainer, children, columnContainerProps: { style, ...restColumnContainerProps } = {}, ...rest } = props;\n    const columnContainerProps = {\n        className: \"react-photo-album--column\",\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            width: cssColumnWidth(props),\n            justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\n            ...style,\n        },\n        ...restColumnContainerProps,\n    };\n    return (React.createElement(React.Fragment, null, (renderColumnContainer !== null && renderColumnContainer !== void 0 ? renderColumnContainer : defaultRenderColumnContainer)({\n        layoutOptions,\n        columnContainerProps,\n        children,\n        ...rest,\n    })));\n}\n\nfunction ColumnsLayout(props) {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps } = props;\n    const columnsLayout = computeColumnsLayout({ photos, layoutOptions });\n    if (!columnsLayout)\n        return null;\n    const { columnsModel, columnsRatios, columnsGaps } = columnsLayout;\n    return (React.createElement(React.Fragment, null, columnsModel.map((column, columnIndex) => (React.createElement(ColumnContainerRenderer, { key: `column-${columnIndex}`, layoutOptions: layoutOptions, columnIndex: columnIndex, columnsCount: columnsModel.length, columnsGaps: columnsGaps, columnsRatios: columnsRatios, renderColumnContainer: renderColumnContainer, columnContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.columnContainerProps }, column.map(({ photo, layout }) => (React.createElement(PhotoRenderer, { key: photo.key || photo.src, photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }))))))));\n}\n\nfunction computeMasonryLayout(props) {\n    const { photos, layoutOptions } = props;\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n    if (columnWidth <= 0) {\n        return columns > 1\n            ? computeMasonryLayout({\n                ...props,\n                layoutOptions: { ...layoutOptions, columns: columns - 1 },\n            })\n            : undefined;\n    }\n    const columnsCurrentTopPositions = [];\n    for (let i = 0; i < columns; i += 1) {\n        columnsCurrentTopPositions[i] = 0;\n    }\n    const columnsModel = photos.reduce((model, photo, index) => {\n        const shortestColumn = columnsCurrentTopPositions.reduce((currentShortestColumn, item, i) => item < columnsCurrentTopPositions[currentShortestColumn] - 1 ? i : currentShortestColumn, 0);\n        columnsCurrentTopPositions[shortestColumn] =\n            columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\n        model[shortestColumn].push({ photo, index });\n        return model;\n    }, Array.from({ length: columns }).map(() => []));\n    return columnsModel.map((column) => column.map(({ photo, index }, photoIndex) => ({\n        photo,\n        layout: {\n            width: columnWidth,\n            height: columnWidth / ratio(photo),\n            index,\n            photoIndex,\n            photosCount: column.length,\n        },\n    })));\n}\n\nfunction MasonryLayout(props) {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps } = props;\n    const masonryLayout = computeMasonryLayout({ photos, layoutOptions });\n    if (!masonryLayout)\n        return null;\n    return (React.createElement(React.Fragment, null, masonryLayout.map((column, columnIndex) => (React.createElement(ColumnContainerRenderer, { key: `masonry-column-${columnIndex}`, layoutOptions: layoutOptions, columnsCount: masonryLayout.length, columnIndex: columnIndex, renderColumnContainer: renderColumnContainer, columnContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.columnContainerProps }, column.map(({ photo, layout }) => (React.createElement(PhotoRenderer, { key: photo.key || photo.src, photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }))))))));\n}\n\nfunction defaultRenderContainer({ containerProps, children, containerRef }) {\n    return (React.createElement(\"div\", { ref: containerRef, ...containerProps }, children));\n}\nfunction ContainerRenderer(props) {\n    const { layout, renderContainer, children, containerRef, containerProps: { style, ...restContainerProps } = {}, } = props;\n    const containerProps = {\n        className: `react-photo-album react-photo-album--${layout}`,\n        style: {\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            justifyContent: \"space-between\",\n            flexDirection: layout === \"rows\" ? \"column\" : \"row\",\n            ...style,\n        },\n        ...restContainerProps,\n    };\n    return (React.createElement(React.Fragment, null, (renderContainer !== null && renderContainer !== void 0 ? renderContainer : defaultRenderContainer)({\n        containerProps,\n        containerRef,\n        layout,\n        children,\n    })));\n}\n\nfunction useArray(array) {\n    const ref = React.useRef(array);\n    if (!array || !ref.current || array.join() !== ref.current.join()) {\n        ref.current = array;\n    }\n    return ref.current;\n}\n\nfunction containerWidthReducer(state, { newContainerWidth, newScrollbarWidth }) {\n    const { containerWidth, scrollbarWidth } = state;\n    if (containerWidth !== undefined &&\n        scrollbarWidth !== undefined &&\n        newContainerWidth !== undefined &&\n        newScrollbarWidth !== undefined &&\n        newContainerWidth > containerWidth &&\n        newContainerWidth - containerWidth <= 20 &&\n        newScrollbarWidth < scrollbarWidth) {\n        return { containerWidth, scrollbarWidth: newScrollbarWidth };\n    }\n    return containerWidth !== newContainerWidth || scrollbarWidth !== newScrollbarWidth\n        ? { containerWidth: newContainerWidth, scrollbarWidth: newScrollbarWidth }\n        : state;\n}\nfunction resolveContainerWidth(el, breakpoints) {\n    let width = el === null || el === void 0 ? void 0 : el.clientWidth;\n    if (width !== undefined && breakpoints && breakpoints.length > 0) {\n        const sorted = [...breakpoints.filter((x) => x > 0)].sort((a, b) => b - a);\n        sorted.push(Math.floor(sorted[sorted.length - 1] / 2));\n        const threshold = width;\n        width = sorted.find((breakpoint, index) => breakpoint <= threshold || index === sorted.length - 1);\n    }\n    return width;\n}\nfunction useContainerWidth(breakpoints, defaultContainerWidth) {\n    const [{ containerWidth }, dispatch] = React.useReducer(containerWidthReducer, {\n        containerWidth: defaultContainerWidth,\n    });\n    const ref = React.useRef(null);\n    const observerRef = React.useRef();\n    const containerRef = React.useCallback((node) => {\n        var _a;\n        (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.disconnect();\n        observerRef.current = undefined;\n        ref.current = node;\n        const updateWidth = () => dispatch({\n            newContainerWidth: resolveContainerWidth(ref.current, breakpoints),\n            newScrollbarWidth: window.innerWidth - document.documentElement.clientWidth,\n        });\n        updateWidth();\n        if (node && typeof ResizeObserver !== \"undefined\") {\n            observerRef.current = new ResizeObserver(updateWidth);\n            observerRef.current.observe(node);\n        }\n    }, [breakpoints]);\n    return { containerRef, containerWidth };\n}\n\nconst breakpoints = Object.freeze([1200, 600, 300, 0]);\nfunction unwrap(value, containerWidth) {\n    return typeof value === \"function\" ? value(containerWidth) : value;\n}\nfunction unwrapParameter(value, containerWidth) {\n    return typeof value !== \"undefined\" ? unwrap(value, containerWidth) : undefined;\n}\nfunction selectResponsiveValue(values, containerWidth) {\n    const index = breakpoints.findIndex((breakpoint) => breakpoint <= containerWidth);\n    return unwrap(values[index >= 0 ? index : 0], containerWidth);\n}\nfunction resolveResponsiveParameter(parameter, containerWidth, values, minValue = 0) {\n    const value = unwrapParameter(parameter, containerWidth);\n    return Math.round(Math.max(value === undefined ? selectResponsiveValue(values, containerWidth) : value, minValue));\n}\n\nfunction resolveLayoutOptions({ layout, onClick, containerWidth, targetRowHeight, rowConstraints, columns, spacing, padding, sizes, }) {\n    return {\n        layout,\n        onClick,\n        containerWidth,\n        columns: resolveResponsiveParameter(columns, containerWidth, [5, 4, 3, 2], 1),\n        spacing: resolveResponsiveParameter(spacing, containerWidth, [20, 15, 10, 5]),\n        padding: resolveResponsiveParameter(padding, containerWidth, [0, 0, 0, 0, 0]),\n        targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [\n            (w) => w / 5,\n            (w) => w / 4,\n            (w) => w / 3,\n            (w) => w / 2,\n        ]),\n        rowConstraints: unwrapParameter(rowConstraints, containerWidth),\n        sizes,\n    };\n}\nfunction resolveComponentsProps(componentsProps, containerWidth) {\n    return typeof componentsProps === \"function\" ? componentsProps(containerWidth) : componentsProps;\n}\nfunction renderLayout(props, containerWidth, componentsProps) {\n    const { photos, layout, renderPhoto, renderRowContainer, renderColumnContainer } = props;\n    const layoutOptions = resolveLayoutOptions({ containerWidth, ...props });\n    const commonLayoutProps = { photos, renderPhoto, componentsProps };\n    if (layout === \"rows\") {\n        return (React.createElement(RowsLayout, { layoutOptions: layoutOptions, renderRowContainer: renderRowContainer, ...commonLayoutProps }));\n    }\n    if (layout === \"columns\") {\n        return (React.createElement(ColumnsLayout, { layoutOptions: layoutOptions, renderColumnContainer: renderColumnContainer, ...commonLayoutProps }));\n    }\n    return (React.createElement(MasonryLayout, { layoutOptions: layoutOptions, renderColumnContainer: renderColumnContainer, ...commonLayoutProps }));\n}\nfunction PhotoAlbum(props) {\n    const { photos, layout, renderContainer, defaultContainerWidth, breakpoints } = props;\n    const { containerRef, containerWidth } = useContainerWidth(useArray(breakpoints), defaultContainerWidth);\n    if (!layout || ![\"rows\", \"columns\", \"masonry\"].includes(layout) || !Array.isArray(photos))\n        return null;\n    const componentsProps = resolveComponentsProps(props.componentsProps, containerWidth);\n    return (React.createElement(ContainerRenderer, { layout: layout, containerRef: containerRef, renderContainer: renderContainer, containerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.containerProps }, containerWidth ? renderLayout(props, containerWidth, componentsProps) : null));\n}\n\nexport { PhotoAlbum, PhotoAlbum as default };\n"],
  "mappings": "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",
  "names": ["columnsModel", "ratio", "breakpoints"]
}
