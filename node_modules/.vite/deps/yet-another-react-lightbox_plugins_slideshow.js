import {
  ACTION_NEXT,
  ACTIVE_SLIDE_COMPLETE,
  ACTIVE_SLIDE_ERROR,
  ACTIVE_SLIDE_LOADING,
  ACTIVE_SLIDE_PLAYING,
  IconButton,
  MODULE_CONTROLLER,
  PLUGIN_SLIDESHOW,
  SLIDE_STATUS_COMPLETE,
  SLIDE_STATUS_ERROR,
  SLIDE_STATUS_LOADING,
  SLIDE_STATUS_PLAYING,
  cleanup,
  createIcon,
  createModule,
  label,
  makeUseContext,
  useController,
  useEventCallback,
  useEvents,
  useLightboxState,
  useLoseFocus,
  useTimeouts
} from "./chunk-2TVOGE4U.js";
import "./chunk-JZ3YVIXN.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/yet-another-react-lightbox/dist/plugins/slideshow/Slideshow.js
var React3 = __toESM(require_react(), 1);

// node_modules/yet-another-react-lightbox/dist/plugins/slideshow/SlideshowContext.js
var React = __toESM(require_react(), 1);
var SlideshowContext = React.createContext(null);
var useSlideshow = makeUseContext("useSlideshow", "SlideshowContext", SlideshowContext);
function SlideshowContextProvider({ slides, slideshow, carousel: { finite }, children }) {
  const { autoplay, delay } = { ...defaultSlideshowProps, ...slideshow };
  const [playing, setPlaying] = React.useState(autoplay);
  const scheduler = React.useRef();
  const slideStatus = React.useRef();
  const { currentIndex } = useLightboxState().state;
  const { setTimeout, clearTimeout } = useTimeouts();
  const { publish, subscribe } = useEvents();
  const disabled = slides.length === 0 || finite && currentIndex === slides.length - 1;
  const togglePlaying = React.useCallback(() => {
    setPlaying((prev) => !prev);
  }, []);
  const cancelScheduler = React.useCallback(() => {
    clearTimeout(scheduler.current);
    scheduler.current = void 0;
  }, [clearTimeout]);
  const scheduleNextSlide = useEventCallback(() => {
    cancelScheduler();
    if (!playing || disabled || slideStatus.current === SLIDE_STATUS_LOADING || slideStatus.current === SLIDE_STATUS_PLAYING) {
      return;
    }
    scheduler.current = setTimeout(() => {
      if (playing) {
        slideStatus.current = void 0;
        publish(ACTION_NEXT);
      }
    }, delay);
  });
  React.useEffect(scheduleNextSlide, [currentIndex, playing, scheduleNextSlide]);
  React.useEffect(() => {
    if (playing && disabled) {
      setPlaying(false);
    }
  }, [currentIndex, playing, disabled]);
  React.useEffect(() => cleanup(cancelScheduler, subscribe(ACTIVE_SLIDE_LOADING, () => {
    slideStatus.current = SLIDE_STATUS_LOADING;
    cancelScheduler();
  }), subscribe(ACTIVE_SLIDE_PLAYING, () => {
    slideStatus.current = SLIDE_STATUS_PLAYING;
    cancelScheduler();
  }), subscribe(ACTIVE_SLIDE_ERROR, () => {
    slideStatus.current = SLIDE_STATUS_ERROR;
    scheduleNextSlide();
  }), subscribe(ACTIVE_SLIDE_COMPLETE, () => {
    slideStatus.current = SLIDE_STATUS_COMPLETE;
    scheduleNextSlide();
  })), [subscribe, cancelScheduler, scheduleNextSlide]);
  const context = React.useMemo(() => ({ playing, disabled, togglePlaying }), [playing, disabled, togglePlaying]);
  return React.createElement(SlideshowContext.Provider, { value: context }, children);
}

// node_modules/yet-another-react-lightbox/dist/plugins/slideshow/SlideshowButton.js
var React2 = __toESM(require_react(), 1);
var PlayIcon = createIcon("Play", React2.createElement("path", { d: "M8 5v14l11-7z" }));
var PauseIcon = createIcon("Pause", React2.createElement("path", { d: "M6 19h4V5H6v14zm8-14v14h4V5h-4z" }));
function SlideshowButton() {
  const { playing, disabled, togglePlaying } = useSlideshow();
  const { getLightboxProps } = useController();
  const { render, labels } = getLightboxProps();
  const focusListeners = useLoseFocus(disabled);
  return render.buttonSlideshow ? React2.createElement(React2.Fragment, null, render.buttonSlideshow({ playing, togglePlaying, disabled })) : React2.createElement(IconButton, { label: playing ? label(labels, "Pause") : label(labels, "Play"), icon: playing ? PauseIcon : PlayIcon, renderIcon: playing ? render.iconSlideshowPause : render.iconSlideshowPlay, onClick: togglePlaying, disabled, ...focusListeners });
}

// node_modules/yet-another-react-lightbox/dist/plugins/slideshow/Slideshow.js
var defaultSlideshowProps = {
  autoplay: false,
  delay: 3e3
};
var Slideshow = ({ augment, append }) => {
  augment(({ slideshow: slideshowProps, toolbar: { buttons, ...restToolbar }, ...restProps }) => ({
    toolbar: { buttons: [React3.createElement(SlideshowButton, { key: PLUGIN_SLIDESHOW }), ...buttons], ...restToolbar },
    slideshow: { ...defaultSlideshowProps, ...slideshowProps },
    ...restProps
  }));
  append(MODULE_CONTROLLER, createModule(PLUGIN_SLIDESHOW, SlideshowContextProvider));
};

// node_modules/yet-another-react-lightbox/dist/plugins/slideshow/index.js
var slideshow_default = Slideshow;
export {
  slideshow_default as default
};
//# sourceMappingURL=yet-another-react-lightbox_plugins_slideshow.js.map
